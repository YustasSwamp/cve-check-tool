/*
 * This file is part of cve-check-tool
 *
 * Copyright Â© 2016 Intel Corporation
 *
 * cve-check-tool is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * As an additional permission, the right to link to OpenSSL is granted.
 */

#pragma once

#include <nica.h>
#include <stdio.h>

#define __unused__ __attribute__((unused))

/**
 * NcTemplateParser
 *
 * Fed a template, this parser will compile a series of contexts to be
 * used later in a render loop
 */
typedef struct NcTemplateParser NcTemplateParser;

/**
 * NcTemplateContext
 *
 * The context must be populated with key->value mappings to enable the logic
 * and content for the main render function.
 */
typedef struct NcTemplateContext NcTemplateContext;

/**
 * Construct a new NcTemplateParser
 */
NcTemplateParser *nc_template_parser_new(void);

/**
 * Free a previously allocated NcTemplateParser and any compiled resources
 */
void nc_template_parser_free(NcTemplateParser *parser);

/**
 * Compile this template parser from the given @buffer of size @length
 */
bool nc_template_parser_load(NcTemplateParser *parser, const char *buffer, ssize_t length);

/**
 * Render the current parser to the given output stream
 */
bool nc_template_parser_render(NcTemplateParser *parser, NcTemplateContext *context, FILE *stream);

/**
 * Construct a new root template context
 */
NcTemplateContext *nc_template_context_new(void);

/**
 * Add a key->value mapping to the context with the string @value
 */
bool nc_template_context_add_string(NcTemplateContext *context, const char *key, char *value);

/**
 * Add a key->value mapping to the context with the boolean @value
 */
bool nc_template_context_add_bool(NcTemplateContext *context, const char *key, bool value);

/**
 * Add a key->value mapping to the context with a TemplateContext child @value
 */
bool nc_template_context_add_child(NcTemplateContext *context, const char *key,
                                   NcTemplateContext *child);

/**
 * Add an item to list with the name of @key.
 * If the list does not already exist, it will be created. Each node in the list must be
 * a full NcTemplateContext, which will be the root context in each iteration
 */
bool nc_template_context_add_list(NcTemplateContext *context, const char *key,
                                  NcTemplateContext *node);

/**
 * Free a previously allocated template context and any associated resources
 */
void nc_template_context_free(NcTemplateContext *context);

/**
 * Convenience macros
 */
DEF_AUTOFREE(NcTemplateParser, nc_template_parser_free)
DEF_AUTOFREE(NcTemplateContext, nc_template_context_free)
