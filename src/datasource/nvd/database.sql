-- Anatomy of a CVE:
--      ID
--      SUMMARY
--      MODIFIED
--      SCORE
--      VECTOR
--
--      VENDOR
--      PRODUCT
--      VERSION

-- i.e.: cpe:/a:dhcpcd_project:dhcpcd:3.2.1
--
CREATE TABLE IF NOT EXISTS CVE_IDS (ID TEXT UNIQUE, SUMMARY TEXT, SCORE TEXT, MODIFIED INTEGER, VECTOR TEXT);

CREATE TABLE IF NOT EXISTS PRODUCTS (HASH INTEGER PRIMARY KEY AUTOINCREMENT, VENDOR TEXT, PRODUCT TEXT);
CREATE TABLE IF NOT EXISTS VERSIONS (ID INTEGER PRIMARY KEY AUTOINCREMENT, PRODUCT_ID INTEGER, CVE_ID TEXT, VERSION TEXT);

CREATE VIEW IF NOT EXISTS cve_insert AS SELECT c.ID as CVE_ID, c.SUMMARY, c.MODIFIED, c.SCORE, c.VECTOR, p.VENDOR, p.PRODUCT, v.VERSION
FROM CVE_IDS c INNER JOIN VERSIONS v on c.ID = v.CVE_ID INNER JOIN PRODUCTS p ON v.PRODUCT_ID = p.HASH;

CREATE TRIGGER IF NOT EXISTS insert_cve_trigger INSTEAD OF INSERT ON cve_insert
BEGIN
        INSERT OR REPLACE INTO CVE_IDS (ID, MODIFIED, SUMMARY, SCORE, VECTOR) SELECT NEW.CVE_ID, NEW.MODIFIED, NEW.SUMMARY, NEW.SCORE, NEW.VECTOR WHERE NOT EXISTS (SELECT 1 FROM CVE_IDS WHERE NEW.CVE_ID = CVE_IDS.ID and NEW.MODIFIED < CVE_IDS.MODIFIED);
        INSERT INTO PRODUCTS (VENDOR, PRODUCT) SELECT NEW.VENDOR, NEW.PRODUCT WHERE NOT EXISTS (SELECT 1 FROM PRODUCTS WHERE NEW.VENDOR = PRODUCTS.VENDOR AND NEW.PRODUCT = PRODUCTS.PRODUCT);
        INSERT OR REPLACE INTO VERSIONS (PRODUCT_ID, CVE_ID, VERSION) VALUES ((SELECT HASH from PRODUCTS WHERE NEW.VENDOR = PRODUCTS.VENDOR AND NEW.PRODUCT = PRODUCTS.PRODUCT), NEW.CVE_ID, NEW.VERSION);
END;
